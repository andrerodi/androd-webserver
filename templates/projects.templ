package templates

import (
	"strconv"
	"fmt"

	"github.com/gomarkdown/markdown"
	"github.com/gomarkdown/markdown/html"
	"github.com/gomarkdown/markdown/parser"
)

type Project struct {
	Id      int
	Title   string
	Date    string
	Content []byte
}

script swiper() {
  if (mobileCheck()) {
    var cardElement = document.getElementById('card');

    // create a simple instance
    // by default, it only adds horizontal recognizers
    var mc = new Hammer(cardElement);
    
    // listen to events...
    let pan = "unknown"
    mc.on("panleft panright panend", function(ev) {
      if (ev.type != "panend") {
        pan = ev.type;
      } else {
        if (pan == "panleft") {
          next("next")
        } else if (pan == "panright") {
          next("previous")
        }
      }
    });
  }

  function next(direction) {
    if (direction == "next") {
      document.getElementById("next-button").click()
    } else {
      document.getElementById("previous-button").click()
    }
  }
}


templ Projects(current, total int, project Project) {
  <script>
    window.SMWCentral.SPCPlayer.Backend.stopSPC()
  </script>
  @swiper()

	<!-- PAGING LEFT -->
	<div class="is-justify-content-center	is-align-content-center">
		<button id="previous-button" class="is-hidden-mobile"
			hx-get={ string(templ.URL(fmt.Sprintf("projects?id=%s", strconv.Itoa(current-1)))) }
			hx-target="#contents"
			if current <= 1 {
				disabled
				style="cursor: default; pointer-events: none;"
			}
			class="button is-small mr-5">
			<span>&#60;&#61;</span>
		</button>
	</div>
	<div style="width: 100%;">
		<div id="card" class="card card-border" style="min-width: 80%;">
			<div class="card-content">
				<p class="title">
					{ project.Title }
				</p>
		<p class="subtitle">
					{ project.Date }
				</p>
				<p>
					@templ.Raw(mdToHTML(project.Content))
				</p>
			</div>
		</div>
	</div>
	<!-- PAGING RIGHT -->
	<div class="is-justify-content-center	is-align-content-center">
		<button id="next-button" class="is-hidden-mobile"
			hx-get={ string(templ.URL(fmt.Sprintf("projects?id=%s", strconv.Itoa(current+1)))) }
			hx-target="#contents"
			if current >= total {
				disabled
				style="cursor: default; pointer-events: none;"
			}
			class="button is-small ml-5"
		>
			<span>&#62;&#61;</span>
		</button>
	</div>
}

func mdToHTML(md []byte) string {
	buffer := mdToHtmlBuffer(md)
	return string(buffer)
}

func mdToHtmlBuffer(md []byte) []byte {
	// create markdown parser with extensions
	extensions := parser.CommonExtensions | 
    parser.AutoHeadingIDs | 
    parser.NoEmptyLineBeforeBlock 

	p := parser.NewWithExtensions(extensions)
	doc := p.Parse(md)

	// create HTML renderer with extensions
	htmlFlags := html.CommonFlags | html.HrefTargetBlank
	opts := html.RendererOptions{Flags: htmlFlags}
	renderer := html.NewRenderer(opts)

	return markdown.Render(doc, renderer)
}

